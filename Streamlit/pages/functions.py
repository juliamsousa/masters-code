# Importando as bibliotecas necess√°rias
import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
from mplsoccer import Pitch, Sbopen
import pandas as pd
import networkx as nx
import seaborn as sns

# Definindo o t√≠tulo da dashboard
st.title("Implementa√ß√£o üêç")
st.subheader("Essa se√ß√£o cont√©m o c√≥digo desenvolvido na an√°lise da rede de passes.")

st.markdown("#### Extraindo os dados StatsBomb")
code="""
    # Importando as bibliotecas necess√°rias
    import matplotlib.pyplot as plt
    import numpy as np
    from mplsoccer import Pitch, Sbopen
    import pandas as pd
    import networkx as nx
    import seaborn as sns

    # Instanciando um objeto parser para importar dados abertos da StatsBomb
    parser = Sbopen()

    # Extraindo os dados de competi√ß√µes dispon√≠veis no StatsBomb em um DataFrame
    df_competition = parser.competition()

    # Verificando quais dessas competi√ß√µes s√£o de futebol feminino
    df_female_competitions = df_competition.loc[df_competition['competition_gender'] == "female"]

    ## 
    # Extraindo os dados de todas as partidas da competi√ß√£o Women's World Cup - 2023
    # competition_id = 72 e season_id = 107
    ## 
    df_matches = parser.match(competition_id = 72, season_id = 107)

    # Extraindo o data frame contendo os dados da partida espec√≠fica
    df_current_match = df_matches.loc[df_matches['match_id'] == 3904629]

    # Extraindo o nome e id do time da casa
    match_home_team = df_current_match.iloc[0]["home_team_name"]
    match_home_team_id = df_current_match.iloc[0]["home_team_id"]

    print(str(match_home_team))
    print(str(match_home_team_id))

    # Extraindo o nome e id do time de fora
    match_away_team = df_current_match.iloc[0]["away_team_name"]
    match_away_team_id = df_current_match.iloc[0]["away_team_id"]

    print(str(match_away_team))
    print(str(match_away_team_id))

    # Extrai os eventos de uma partida fornecendo seu Id para o parser
    df_events, related, freeze, tatics = parser.event(3904629)
"""
st.code(code, language="python")

st.markdown("#### Extraindo os dados dos passes")
code="""
    # Procurando por eventos de substitui√ß√£o no jogo - (Time da Casa)
    substitutions = df_events.loc[df_events["type_name"] == "Substitution"]
    home_team_subs = substitutions.loc[substitutions["team_name"] == match_home_team]

    # Extrai o √≠ndice do primeiro evento de substitui√ß√£o - (Time da Casa)
    ht_first_sub_index = home_team_subs.iloc[0]["index"]

    # Extraindo todos os eventos de passe da partida
    match_passes = df_events.loc[df_events["type_name"] == "Pass"]
    # Extraindo os eventos de passe - (Time da Casa)
    home_team_passes = match_passes.loc[match_passes["team_name"] == match_home_team]

    # Removendo eventos de Lateral
    home_team_passes = home_team_passes.loc[match_passes.sub_type_name != "Throw-in"]

    # Os passes bem sucedidos s√£o aqueles nos quais o outcome_name √© nulo
    # Extraindo os passes bem sucedidos - (Time da Casa)
    ht_succesful_passes = home_team_passes.loc[home_team_passes["outcome_name"].isnull()]

    ## 
    # Os passes que aconteceram antes da primeira substitui√ß√£o t√™m id menor que o do evento de substitui√ß√£o. 
    # Os ids dos eventos s√£o sequenciais
    ## 
    ht_first_sub_passes = ht_succesful_passes.loc[ht_succesful_passes["index"] < ht_first_sub_index]

    ## Extraindo os dados necess√°rios para a rede de passes
    # x: coordenada x de in√≠cio do passe
    # y: coordenada y de in√≠cio do passe
    # end_x: coordenada x de fim do passe
    # end_y: coordenada y de fim do passe
    # player_name: jogador que inicia o passe
    # pass_recipient_name: jogador que recebe o passe
    ##
    ht_first_sub_passes = ht_first_sub_passes[['x', 'y', 'end_x', 'end_y', "player_name", "pass_recipient_name"]]

    # Formatando o nome das jogadoras para que apenas o sobrenome delas seja exibido
    ht_first_sub_passes["player_name"] = ht_first_sub_passes["player_name"].apply(lambda x: str(x).split()[-1])
    ht_first_sub_passes["pass_recipient_name"] = ht_first_sub_passes["pass_recipient_name"].apply(lambda x: str(x).split()[-1])

    # Obs.: no exemplo do soccermatics um filtro √© utilizado para simplificar o c√≥digo, por√©m a extra√ß√£o dos dados foi feita passo
    # a passo para melhor entendimento dos dados e como manipul√°-los
"""
st.code(code, language="python")

st.markdown("#### Calculando o tamanho e localiza√ß√£o dos n√≥s")
code="""
    # Criando um DataFrame vazio para armazenar as informa√ß√µes
    df_scatter = pd.DataFrame()

    # Percorre os eventos de cada jogador por nome
    for i, name in enumerate(ht_first_sub_passes["player_name"].unique()):
        # Extrai as coordenadas x,y (in√≠cio) do passe - Todos os passes que foram feitos pelo jogador, em que ele foi o passador
        # Os dados dos passes s√£o convertidos para um array numpy
        passer_x = ht_first_sub_passes.loc[ht_first_sub_passes["player_name"] == name]["x"].to_numpy()
        passer_y = ht_first_sub_passes.loc[ht_first_sub_passes["player_name"] == name]["y"].to_numpy()

        # Extrai as coordenas end_x, end_y (fim) do passe - Todos os passes que foram recebidos pelo jogador, em que ele foi o receptor
        # Os dados dos passes s√£o convertidos para um array numpy
        receiver_x = ht_first_sub_passes.loc[ht_first_sub_passes["pass_recipient_name"] == name]["end_x"].to_numpy()
        receiver_y = ht_first_sub_passes.loc[ht_first_sub_passes["pass_recipient_name"] == name]["end_y"].to_numpy()

        # Preenche no DataFrame o nome do jogador sendo analisado no momento
        df_scatter.at[i, "player_name"] = name

        # Calcula a m√©dia das coordenadas do jogador para determinar sua posi√ß√£o "m√©dia" no campo
        # M√©dia da coordenada x do jogador no campo durante a partida, tanto como passador quanto receptor
        df_scatter.at[i, "x"] = np.mean(np.concatenate([passer_x, receiver_x]))
        # M√©dia da coordenada y do jogador no campo durante a partida, tanto como passador quanto receptor
        df_scatter.at[i, "y"] = np.mean(np.concatenate([passer_y, receiver_y]))
        
        # Preenche no DataFrame a quantidade de passes do jogador sendo analisado no momento
        df_scatter.at[i, "no_passes"] = ht_first_sub_passes.loc[ht_first_sub_passes["player_name"] == name].count().iloc[0]

    # Define o tamanho do marcador do v√©rtice de acordo com a quantidade de passes feitos pelo jogador
    df_scatter["marker_size"] = (df_scatter["no_passes"] / df_scatter["no_passes"].max() * 1500)
"""
st.code(code, language="python")

st.markdown("#### Calculando a espessura das arestas")
code="""
    # Calculando a quantidade de passes entre jogadores
    df_lines = ht_first_sub_passes.groupby(["player_name", "pass_recipient_name"]).x.count().reset_index()

    # Renomeando a coluna para contagem de passes
    df_lines.rename({"x": "pass_count"}, axis="columns", inplace=True)

    # Definindo um limiar para quantidade de passes entre jogadores
    # Nesse caso o limiar est√° definido a 0, de modo que todos os passes entre jogadores ser√£o considerados
    # √â poss√≠vel avaliar diferentes limiares para quantidade de passes
    df_lines = df_lines[df_lines["pass_count"]>0]   


"""
st.code(code, language="python")

st.markdown("#### Plotando os n√≥s")
code="""
    # Instanciando um campo - Verde com linhas brancas
    pitch = Pitch(pitch_color='grass', line_color='white', stripe=True)
    # Especifica√ß√µes da figura para plotagem
    fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False, endnote_height=0.04, title_space=0, endnote_space=0)

    # Dados de espalhamento dos jogadores no campo
    pitch.scatter(
        df_scatter.x, 
        df_scatter.y, 
        s=df_scatter.marker_size,
        color="red",
        edgecolors="grey",
        linewidth=1, 
        alpha=1, 
        ax=ax["pitch"], 
        zorder = 3
    )

    # Anota os nomes dos jogadores nos n√≥s, assim como suas coordenadas no campo
    for i, row in df_scatter.iterrows():
        pitch.annotate(
            row.player_name, 
            xy=(row.x, row.y), 
            c='black', 
            va='center', 
            ha='center', 
            weight = "bold", 
            size=16, 
            ax=ax["pitch"], 
            zorder = 4
        )

    # Percorre a rede de passes para cada par de jogadores
    for i, row in df_lines.iterrows():
            # Extrai os jogadores
            player1 = row["player_name"]
            player2 = row["pass_recipient_name"]
        
            # Exrai as coordenadas x, y do primeiro jogador
            player1_x = df_scatter.loc[df_scatter["player_name"] == player1]['x'].iloc[0]
            player1_y = df_scatter.loc[df_scatter["player_name"] == player1]['y'].iloc[0]
            
            # Exrai as coordenadas x, y do segundo jogador
            player2_x = df_scatter.loc[df_scatter["player_name"] == player2]['x'].iloc[0]
            player2_y = df_scatter.loc[df_scatter["player_name"] == player2]['y'].iloc[0]

            # Extrai a quantidade de passes trocados pelos jogadores
            num_passes = row["pass_count"]
        
            # Ajusta a espessura da linha do link, quanto mais passes feitos maior ser√° a espessura da linha
            line_width = (num_passes / df_lines['pass_count'].max() * 10)
        
            # Configura√ß√£o do plot dos links
            pitch.lines(
                player1_x, 
                player1_y, 
                player2_x, 
                player2_y,
                alpha=1, 
                lw=line_width, 
                zorder=2, 
                color="red", 
                ax = ax["pitch"]
            )

    # T√≠tulo da partida com time da casa vs. time de fora
    subtitle = "Rede de passes de: " + match_home_team + " contra " + match_away_team

    # Determinando o t√≠tulo da partida
    fig.suptitle(subtitle)

    # Mostrando o campo com os jogadores plotados
    plt.show()
"""
st.code(code, language="python")

st.markdown("#### C√°lculo da Centraliza√ß√£o")
code="""
    # Calculando o n√∫mero de passes para cada jogador
    number_of_passes = ht_first_sub_passes.groupby(["player_name"]).x.count().reset_index()
    number_of_passes.rename({'x': 'pass_count'}, axis='columns', inplace=True)

    # Encontrando o jogador com maior n√∫mero de passes
    max_number_of_passes = number_of_passes["pass_count"].max()

    # Realizando o c√°lculo da equa√ß√£o de centraliza√ß√£o
    # Calculando o denominador
    denominator = 10*number_of_passes["pass_count"].sum()
    # Calculando o numerador
    nominator = (max_number_of_passes - number_of_passes["pass_count"]).sum()

    # Calculando o √≠ndice de centraliza√ß√£o
    centralisation_index = nominator/denominator

    print("O √≠dice de centraliza√ß√£o do time " + match_home_team + " foi de: %.2f'" %centralisation_index)
"""
st.code(code, language="python")

st.markdown("#### Gerando um Grafo Isomorfo")
code="""
    # O DataFrame de passes entre jogadores √© convertido para o formato tupla para ser utilizado como grafo do networkx
    pass_graph = df_lines.apply(tuple, axis=1).tolist()

    # Criando um grafo isomorfo ao grafo de passes
    AUS_Graph = nx.DiGraph()

    # Percorrendo a lista de tuplas do grafo de passes
    for i in range(len(pass_graph)):
        # Criando as arestas entre os n√≥s (passes entre jogadores)
        # pass_graph[i][0]: representa o jogador que originou o passe
        # pass_graph[i][1]: representa o jogador que recebeu o passe
        # pass_graph[i][2]: representa a quantidade de passes entre a dupla de jogadores
        AUS_Graph.add_edge(pass_graph[i][0], pass_graph[i][1], weight=pass_graph[i][2])

    # Extraindo as arestas do grafo criado
    AUS_edges = AUS_Graph.edges()
    # Extraindo os pesos para determinar a espessura das arestas
    AUS_weights = [AUS_Graph[u][v]['weight'] for u, v in AUS_edges]

    # Plotando o grafo isomorfo gerado
    nx.draw(AUS_Graph, node_size=800, with_labels= True, node_color='yellow', width=AUS_weights)
    # Colocando borda nos n√≥s
    plt.gca().collections[0].set_edgecolor('black')
    # Definindo o t√≠tulo do plot
    plt.title("Rede de passes de: " + match_home_team + " contra " + match_away_team, size=30)
    plt.show()
"""
st.code(code, language="python")

st.markdown("#### C√°lculo do Grau Total")
code="""
    # Preparando um dicion√°rio com o nome das jogadoras
    degrees_AUS = dict(nx.degree(AUS_Graph))

    # Criando um DataFrame a partir do dicion√°rio de graus das jogadoras
    df_degrees_AUS = pd.DataFrame.from_dict(list(degrees_AUS.items()))

    # Renomeando as colunas para melhor entendimento
    df_degrees_AUS.rename(columns = {
        0: "Nome da Jogadora",
        1: "Grau do N√≥"
        },
        inplace=True
    )     

    # Plotando o grau de passes para cada jogadora
    # Extraindo os atributos para plot
    X = list(degrees_AUS.keys())
    Y = list(degrees_AUS.values())

    sns.barplot(x=Y, y=X, palette="magma", legend=False)

    plt.xticks(range(0, max(Y)+5, 2))
    plt.xlabel("Grau")
    plt.ylabel("Jogadora")
    plt.title("Rede de passes de: " + match_home_team + " contra " + match_away_team)

    plt.show()
"""
st.code(code, language="python")

st.markdown("#### C√°lculo do Grau de Entrada")
code="""
    # Preparando um dicion√°rio com o nome das jogadoras
    degrees_AUS = dict(AUS_Graph.in_degree())

    # Criando um DataFrame a partir do dicion√°rio de graus das jogadoras
    df_degrees_AUS = pd.DataFrame.from_dict(list(degrees_AUS.items()))

    # Renomeando as colunas para melhor entendimento
    df_degrees_AUS.rename(columns = {
        0: "Nome da Jogadora",
        1: "Grau do N√≥"
        },
        inplace=True
    )     

    # Plotando o grau de passes para cada jogadora
    # Extraindo os atributos para plot
    X = list(degrees_AUS.keys())
    Y = list(degrees_AUS.values())

    sns.barplot(x=Y, y=X, palette="magma", legend=False)

    plt.xticks(range(0, max(Y)+5, 2))
    plt.xlabel("Grau")
    plt.ylabel("Jogadora")
    plt.title("Quantidade de passes recebidos por jogadora")

    plt.show()
"""
st.code(code, language="python")

st.markdown("#### C√°lculo do Grau de Sa√≠da")
code="""
    # Preparando um dicion√°rio com o nome das jogadoras
    degrees_AUS = dict(AUS_Graph.out_degree())

    # Criando um DataFrame a partir do dicion√°rio de graus das jogadoras
    df_degrees_AUS = pd.DataFrame.from_dict(list(degrees_AUS.items()))

    # Renomeando as colunas para melhor entendimento
    df_degrees_AUS.rename(columns = {
        0: "Nome da Jogadora",
        1: "Grau do N√≥"
        },
        inplace=True
    )     

    # Plotando o grau de passes para cada jogadora
    # Extraindo os atributos para plot
    X = list(degrees_AUS.keys())
    Y = list(degrees_AUS.values())

    sns.barplot(x=Y, y=X, palette="magma", legend=False)

    plt.xticks(range(0, max(Y)+5, 2))
    plt.xlabel("Grau")
    plt.ylabel("Jogadora")
    plt.title("Quantidade de passes originados por jogadora")

    plt.show()
"""
st.code(code, language="python")

st.markdown("#### C√°lculo da Excentricicade")
code="""
    # Calculando a excentricidade das jogadoras
    excentricity_AUS = nx.eccentricity(AUS_Graph, v=None, weight='weight')
    avg_excentricity_AUS = sum(list(excentricity_AUS.values()))/len(excentricity_AUS)
    print("Excentricidade m√©dia do time: " + str(avg_excentricity_AUS))
"""
st.code(code, language="python")

st.markdown("#### C√°lculo do Coeficiente de Clustering")
code="""
    clustering_AUS = nx.clustering(AUS_Graph, weight='weight')
    avg_clustering_AUS = nx.average_clustering(AUS_Graph, weight='weight')
"""
st.code(code, language="python")

st.markdown("#### C√°lculo de Betweenness")
code="""
    betweenness_AUS = nx.betweenness_centrality(AUS_Graph, weight='weight')
"""
st.code(code, language="python")

st.markdown("#### C√°lculo de Closeness")
code="""
    closeness_AUS = nx.closeness_centrality(AUS_Graph)
"""
st.code(code, language="python")